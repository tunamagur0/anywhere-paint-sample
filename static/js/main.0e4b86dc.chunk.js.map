{"version":3,"sources":["Contexts/AnywherePaintContext.ts","Components/ColorCircle.tsx","Components/Blush.tsx","Components/BlushSize.tsx","Components/EachLayer.tsx","Components/Layer.tsx","Components/Undo.tsx","Components/Canvas.tsx","Components/UtilButtons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AnywherePaintContext","createContext","awPaint","ColorCircle","props","div","React","createRef","this","isInitialized","context","createColorCircle","current","Grid","item","className","classes","container","xs","ratio","ref","Component","contextType","withStyles","theme","createStyles","background","borderRadius","Blush","pencils","state","Pencil","e","style","target","value","setState","changeMode","buttons","map","key","FormControlLabel","control","Radio","label","checked","labelPlacement","alignItems","justify","RadioGroup","row","onChange","handleChange","BlushSize","sizes","size","val","parseInt","setLineWidth","blushSize","GridListTile","color","GridList","height","width","EachLayer","Card","onClick","root","border","isSelected","CardMedia","media","image","name","CardContent","content","TextField","variant","display","Layer","id","images","names","order","window","setInterval","getNewData","getLayerImages","getLayerNames","getSortOrder","selectingLayer","eachLayer","get","push","layerNum","selectLayer","renameLayer","Button","addLayer","removeLayer","newOrder","index","indexOf","setSortOrder","length","cols","layers","Undo","isUndo","undo","redo","handleClick","Canvas","intialize","AnywherePaint","canvasContainer","UtilButtons","downloadName","a","document","createElement","download","href","getIntegratedImage","click","App","Provider","direction","margin","padding","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAUeA,EAHcC,wBAAgC,CAC3DC,QAAS,O,gBCmBLC,E,kDAGJ,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAFAC,SACkB,EAExB,EAAKA,IAAMC,IAAMC,YAFO,E,iEAUxB,OAJIC,KAAKJ,MAAMK,eACbD,KAAKE,QAAQR,QAAQS,kBACnBH,KAAKH,IAAIO,UAEN,I,+BAIP,OACE,kBAACC,EAAA,EAAD,CACEC,MAAI,EACJC,UAAWP,KAAKJ,MAAMY,QAAQC,UAC9BC,GAAIV,KAAKJ,MAAMe,MACfC,IAAKZ,KAAKH,U,GAtBQC,IAAMe,WAA1BlB,EACGmB,YAActB,EA2BRuB,mBA3CA,SAACC,GAAD,OACbC,YAAa,CACXR,UAAW,CACT,QAAS,CACPS,WAAY,QACZC,aAAc,aAsCPJ,CAAmBpB,G,2BCxB5ByB,E,kDAGJ,WAAYxB,GAAe,IAAD,8BACxB,cAAMA,IAFAyB,aACkB,EAExB,EAAKC,MAAQ,CACXC,OAAQ,UAEV,EAAKF,QAAU,CAAC,SAAU,UALF,E,yDAQLG,GACnB,IAAMC,EAAkBD,EAAEE,OAAOC,MACjC3B,KAAK4B,SAAS,CAAEL,OAAQE,IACxBzB,KAAKE,QAAQR,QAAQmC,WAAWJ,K,+BAGxB,IAAD,OACDK,EAAU9B,KAAKqB,QAAQU,KAAI,SAACP,GAAD,OAC/B,kBAACnB,EAAA,EAAD,CAAM2B,IAAKR,GACT,kBAACS,EAAA,EAAD,CACEN,MAAOH,EACPU,QAAS,kBAACC,EAAA,EAAD,MACTC,MAAOZ,EACPa,QAASb,IAAM,EAAKF,MAAMC,OAC1BS,IAAKR,EACLc,eAAe,eAIrB,OACE,kBAACjC,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJI,GAAIV,KAAKJ,MAAMe,MACfJ,UAAWP,KAAKJ,MAAMY,QAAQC,UAC9B8B,WAAW,SACXC,QAAQ,gBAER,kBAACC,EAAA,EAAD,CACEC,KAAG,EACHC,SAAU,SAACnB,GAAD,OACR,EAAKoB,aAAapB,KAGnBM,Q,GA7CShC,IAAMe,WAApBO,EACGN,YAActB,EAmDRuB,mBAtEA,SAACC,GAAD,OACbC,YAAa,CACXR,UAAW,CACT,QAAS,CACPS,WAAY,QACZC,aAAc,aAiEPJ,CAAmBK,G,kBClD5ByB,E,kDAGJ,WAAYjD,GAAe,IAAD,8BACxB,cAAMA,IAFAkD,MAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAG9D,EAAKxB,MAAQ,CACXyB,KAAM,GAHgB,E,yDAOLvB,GACnB,IAAMwB,EAAMC,SAASzB,EAAEE,OAAOC,MAAiB,IAC/C3B,KAAK4B,SAAS,CAAEmB,KAAMC,IACtBhD,KAAKE,QAAQR,QAAQwD,aAAaF,K,+BAG1B,IAAD,OACDG,EAAYnD,KAAK8C,MAAMf,KAAI,SAACP,GAAD,OAC/B,kBAAC4B,EAAA,EAAD,CAAcpB,IAAKR,GACjB,kBAACS,EAAA,EAAD,CACEN,MAAOH,EACPY,MAAK,UAAKZ,EAAL,MACLc,eAAe,SACfJ,QAAS,kBAACC,EAAA,EAAD,CAAOkB,MAAM,YACtBrB,IAAKR,QAIX,OACE,kBAACnB,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAIV,KAAKJ,MAAMe,OACxB,kBAAC2C,EAAA,EAAD,CACE7B,MAAO,CAAE8B,OAAQ,OACjBhD,UAAWP,KAAKJ,MAAMY,QAAQC,WAE9B,kBAACgC,EAAA,EAAD,CACEC,KAAG,EACHjB,MAAO,CAAE+B,MAAO,QAChB7B,MAAO3B,KAAKsB,MAAMyB,KAClBJ,SAAU,SAACnB,GAAD,OAAO,EAAKoB,aAAapB,KAElC2B,S,GAxCWrD,IAAMe,WAAxBgC,EACG/B,YAActB,EA+CRuB,mBAhEA,SAACC,GAAD,OACbC,YAAa,CACXR,UAAW,CACTS,WAAY,QACZC,aAAc,YA4DLJ,CAAmB8B,G,6DC9C5BY,E,2KACiBjC,GACnB,IAAMG,EAAgBH,EAAEE,OAAOC,MAC/B3B,KAAKJ,MAAM+C,SAAShB,K,+BAGZ,IAAD,OACP,OACE,kBAAC+B,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAK/D,MAAM+D,WAC1BpD,UAAWP,KAAKJ,MAAMY,QAAQoD,KAC9BnC,MAAO,CACLoC,OAAO,aAAD,OAAe7D,KAAKJ,MAAMkE,WAAa,MAAQ,WAGvD,kBAACC,EAAA,EAAD,CACExD,UAAWP,KAAKJ,MAAMY,QAAQwD,MAC9BC,MAAOjE,KAAKJ,MAAMqE,QAEpB,yBAAK1D,UAAWP,KAAKJ,MAAMY,QAAQ0D,MACjC,kBAACC,EAAA,EAAD,CAAa5D,UAAWP,KAAKJ,MAAMY,QAAQ4D,SACzC,kBAACC,EAAA,EAAD,CACEC,QAAQ,WACR3C,MAAO3B,KAAKJ,MAAMsE,KAClBvB,SAAU,SAACnB,GAAD,OACR,EAAKoB,aAAapB,a,GAzBV1B,IAAMe,WAmCfE,eAzDA,SAACC,GAAD,OACbC,YAAa,CACX2C,KAAM,CACJW,QAAS,QAEXP,MAAO,CACLR,MAAO,OAETY,QAAS,CACPG,QAAS,YAgDAxD,CAAmB0C,GChC5Be,E,kDAGJ,WAAY5E,GAAe,IAAD,8BACxB,cAAMA,IAFA6E,IAAc,EAGpB,EAAKnD,MAAQ,CACXoD,OAAQ,KACRC,MAAO,KACPvE,QAAS,EACTwE,MAAO,IANe,E,iEAUJ,IAAD,OAMnB,OALI5E,KAAKJ,MAAMK,gBAA8B,IAAbD,KAAKyE,KACnCzE,KAAKyE,GAAKI,OAAOC,aAAY,WAC3B,EAAKC,eACJ,OAEE,I,mCAIP,IAAML,EAAS1E,KAAKE,QAAQR,QAAQsF,iBAC9BL,EAAQ3E,KAAKE,QAAQR,QAAQuF,gBAC7BL,EAAQ5E,KAAKE,QAAQR,QAAQwF,eACnClF,KAAK4B,SAAS,CACZ8C,OAAQA,EACRC,MAAOA,EACPC,MAAOA,EACPxE,QAASJ,KAAKE,QAAQR,QAAQyF,mB,+BAIxB,IAAD,OACDC,EAA2B,GACjC,GAAIpF,KAAKsB,MAAMsD,MAAO,CAAC,IAAD,gBACF5E,KAAKsB,MAAMsD,OADT,6BACT5C,EADS,QAEZiC,EAAK,UAAG,EAAK3C,MAAMoD,cAAd,aAAG,EAAmBW,IAAIrD,GAC/BkC,EAAI,UAAG,EAAK5C,MAAMqD,aAAd,aAAG,EAAkBU,IAAIrD,GAC/BiC,GAASC,GACXkB,EAAUE,KACR,kBAAClC,EAAA,EAAD,CAAcpB,IAAKA,GACjB,kBAAC,EAAD,CACEuD,SAAUvD,EACVkC,KAAMA,EACND,MAAOA,EACPN,QAAS,WACP,EAAKzD,QAAQR,QAAQ8F,YAAYxD,GACjC,EAAK+C,cAEPpC,SAAU,SAAChB,GACT,EAAKzB,QAAQR,QAAQ+F,YAAYzD,EAAKL,GACtC,EAAKoD,cAEPjB,WAAY9B,IAAQ,EAAK9B,QAAQR,QAAQyF,eACzCnD,IAAKA,OAnBf,2BAAqC,IADjB,+BA2BtB,OACE,kBAAC3B,EAAA,EAAD,CAAMI,WAAS,EAACH,MAAI,EAACI,GAAIV,KAAKJ,MAAMe,OAClC,kBAACN,EAAA,EAAD,CAAMI,WAAS,EAACH,MAAI,GAClB,kBAACD,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJkC,QAAQ,eACR9B,GAAI,GACJH,UAAWP,KAAKJ,MAAMY,QAAQsB,SAE9B,kBAACzB,EAAA,EAAD,CAAMC,MAAI,GACR,kBAACoF,EAAA,EAAD,CACEpB,QAAQ,YACRX,QAAS,WACP,IAAM4B,EAAmB,EAAKrF,QAAQR,QAAQiG,WAC9C,EAAKzF,QAAQR,QAAQ8F,YAAYD,GACjC,EAAKR,eALT,MAWF,kBAAC1E,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CACEpB,QAAQ,YACRX,QAAS,WACP,EAAKzD,QAAQR,QAAQkG,YACnB,EAAK1F,QAAQR,QAAQyF,gBAEvB,EAAKJ,eANT,MAYF,kBAAC1E,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CACEpB,QAAQ,YACRX,QAAS,WACP,GAAI,EAAKrC,MAAMsD,MAAM,KAAO,EAAKtD,MAAMlB,QAAvC,CACA,IAAMyF,EAAQ,YAAO,EAAKvE,MAAMsD,OAC1BkB,EAAQD,EAASE,QAAQ,EAAKzE,MAAMlB,SAH7B,EAI4B,CACvCyF,EAASC,GACTD,EAASC,EAAQ,IAFlBD,EAASC,EAAQ,GAJL,KAISD,EAASC,GAJlB,KAQb,EAAK5F,QAAQR,QAAQsG,aAAaH,GAClC,EAAKd,gBAXT,WAiBF,kBAAC1E,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CACEpB,QAAQ,YACRX,QAAS,WACP,GACE,EAAKrC,MAAMsD,MAAM,EAAKtD,MAAMsD,MAAMqB,OAAS,KAC3C,EAAK3E,MAAMlB,QAFb,CAKA,IAAMyF,EAAQ,YAAO,EAAKvE,MAAMsD,OAC1BkB,EAAQD,EAASE,QAAQ,EAAKzE,MAAMlB,SAP7B,EAQ4B,CACvCyF,EAASC,GACTD,EAASC,EAAQ,IAFlBD,EAASC,EAAQ,GARL,KAQSD,EAASC,GARlB,KAYb,EAAK5F,QAAQR,QAAQsG,aAAaH,GAClC,EAAKd,gBAfT,YAsBJ,kBAAC1E,EAAA,EAAD,CAAMC,MAAI,EAACI,GAAI,IACb,kBAAC4C,EAAA,EAAD,CAAU4C,KAAM,EAAG3F,UAAWP,KAAKJ,MAAMY,QAAQ2F,QAC9Cf,U,GA7IKtF,IAAMe,WAApB2D,EACG1D,YAActB,EAqJRuB,mBA5KA,SAACC,GAAD,OACbC,YAAa,CACXa,QAAS,CACPyB,OAAQ,QAEV4C,OAAQ,CACN5C,OAAQ,YAsKCxC,CAAmByD,GClK5B4B,E,0KAGgBC,GACdA,EACFrG,KAAKE,QAAQR,QAAQ4G,OAErBtG,KAAKE,QAAQR,QAAQ6G,S,+BAIf,IAAD,OACP,OACE,kBAAClG,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJC,UAAWP,KAAKJ,MAAMY,QAAQC,UAC9BC,GAAIV,KAAKJ,MAAMe,MACf4B,WAAW,SACXC,QAAQ,gBAER,kBAACnC,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CAAQ/B,QAAS,kBAAM,EAAK6C,aAAY,KAAxC,SAEF,kBAACnG,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CAAQ/B,QAAS,kBAAM,EAAK6C,aAAY,KAAxC,c,GAzBS1G,IAAMe,WAAnBuF,EACGtF,YAActB,EA+BRuB,mBA7CA,SAACC,GAAD,OACbC,YAAa,CACXR,UAAW,CACT,WAAY,CACVS,WAAY,cAyCLH,CAAmBqF,G,iBC/B5BK,E,kDAGJ,WAAY7G,GAAe,IAAD,8BACxB,cAAMA,IAFAa,eACkB,EAExB,EAAKA,UAAYX,IAAMC,YAFC,E,gEAMxBC,KAAKJ,MAAM8G,UACT,IAAIC,IACF3G,KAAKS,UAAUL,QACfJ,KAAKJ,MAAM4D,MACXxD,KAAKJ,MAAM2D,W,+BAMf,OACE,kBAAClD,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJiC,WAAW,SACXC,QAAQ,SACRjC,UAAWP,KAAKJ,MAAMY,QAAQoG,iBAE9B,kBAACvG,EAAA,EAAD,CACEC,MAAI,EACJmB,MAAO,CACL+B,MAAOxD,KAAKJ,MAAM4D,MAClBD,OAAQvD,KAAKJ,MAAM2D,OACnBM,OAAQ,mBAEVjD,IAAKZ,KAAKS,iB,GAlCCX,IAAMe,WAArB4F,EACG3F,YAActB,EAwCRuB,mBAxDA,SAACC,GAAD,OACbC,YAAa,CACX2F,gBAAiB,CACf,QAAS,CACP1F,WAAY,cAoDLH,CAAmB0F,GCrC5BI,E,kDAEJ,WAAYjH,GAAe,IAAD,8BACxB,cAAMA,IACD0B,MAAQ,CACXwF,aAAc,IAHQ,E,uDAQxB,IAAMC,EAAIC,SAASC,cAAc,KACjCF,EAAEG,SAAWlH,KAAKsB,MAAMwF,aACxBC,EAAEI,KAAOnH,KAAKE,QAAQR,QAAQ0H,qBAC9BL,EAAEM,U,+BAGM,IAAD,OACP,OACE,kBAAChH,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJC,UAAWP,KAAKJ,MAAMY,QAAQC,UAC9BC,GAAIV,KAAKJ,MAAMe,MACf4B,WAAW,SACXC,QAAQ,gBAER,kBAACnC,EAAA,EAAD,KACE,kBAACgE,EAAA,EAAD,CACEC,QAAQ,WACR3C,MAAO3B,KAAKsB,MAAMwF,aAClBnE,SAAU,SAACnB,GAAD,OACR,EAAKI,SAAS,CAAEkF,aAActF,EAAEE,OAAOC,YAI7C,kBAACtB,EAAA,EAAD,KACE,kBAACqF,EAAA,EAAD,CAAQ/B,QAAS,kBAAM,EAAKuD,aAA5B,kB,GApCgBpH,IAAMe,WAA1BgG,EACG/F,YAActB,EA0CRuB,mBA5DA,SAACC,GAAD,OACbC,YAAa,CACXR,UAAW,CACT,WAAY,CACVS,WAAY,cAwDLH,CAAmB8F,GChC5BS,E,kDACJ,WAAY1H,GAAmC,IAAD,8BAC5C,cAAMA,IACD0B,MAAQ,CACX5B,QAAS,KACT8D,MAAO,KACPD,OAAQ,IACRtD,eAAe,GAN2B,E,qDAUpC,IAAD,OACP,OACE,yBAAKM,UAAWP,KAAKJ,MAAMY,QAAQoD,MACjC,kBAAC,EAAqB2D,SAAtB,CAA+B5F,MAAO,CAAEjC,QAASM,KAAKsB,MAAM5B,UAC1D,kBAACW,EAAA,EAAD,CAAMI,WAAS,EAACF,UAAWP,KAAKJ,MAAMY,QAAQC,WAC5C,kBAACJ,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJI,GAAI,EACJ6B,WAAW,UACXC,QAAQ,gBAER,kBAAC,EAAD,CACE7B,MAAO,GACPV,cAAeD,KAAKsB,MAAMrB,gBAE5B,kBAAC,EAAD,CAAWU,MAAO,MAEpB,kBAACN,EAAA,EAAD,CACEI,WAAS,EACTH,MAAI,EACJI,GAAI,EACJ8G,UAAU,SACVjF,WAAW,UACXC,QAAQ,gBAER,kBAACnC,EAAA,EAAD,CAAMI,WAAS,EAACH,MAAI,EAACkC,QAAQ,UAC3B,kBAAC,EAAD,CAAM7B,MAAO,IACb,kBAAC,EAAD,CAAaA,MAAO,IACpB,kBAAC,EAAD,CAAOA,MAAO,KAEhB,kBAAC,EAAD,CACE6C,MAAOxD,KAAKsB,MAAMkC,MAClBD,OAAQvD,KAAKsB,MAAMiC,OACnBmD,UAAW,SAAChH,GACV,EAAKkC,SAAS,CACZlC,QAASA,EACTO,eAAe,OAIrB,kBAACI,EAAA,EAAD,CAAMC,MAAI,KAEZ,kBAAC,EAAD,CAAOK,MAAO,EAAGV,cAAeD,KAAKsB,MAAMrB,uB,GAtDrCH,IAAMe,WA8DTE,eApFA,SAACC,GAAD,OACbC,YAAa,CACX2C,KAAM,CACJJ,MAAO,QACPD,OAAQ,QACRrC,WAAY,UACZuG,OAAQ,GAEVhH,UAAW,CACT+C,MAAO,QACPD,OAAQ,QACRmE,QAAS,+BAyEA3G,CAAmBuG,GC5FdK,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0e4b86dc.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport AnywherePaint from 'anywhere-paint';\r\n\r\ninterface ContextInterface {\r\n  awPaint: AnywherePaint | null;\r\n}\r\n\r\nconst AnywherePaintContext = createContext<ContextInterface>({\r\n  awPaint: null,\r\n});\r\nexport default AnywherePaintContext;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& div': {\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n  isInitialized: boolean;\r\n}\r\n\r\nclass ColorCircle extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n  private div: React.RefObject<HTMLDivElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.div = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.isInitialized)\r\n      this.context.awPaint.createColorCircle(\r\n        this.div.current as HTMLDivElement\r\n      );\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        ref={this.div}\r\n      ></Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ColorCircle);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { Radio, Grid, RadioGroup, FormControlLabel } from '@material-ui/core';\r\nimport { PenStyle } from '../../node_modules/anywhere-paint/lib/lineRender.d';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& div': {\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  Pencil: PenStyle;\r\n}\r\n\r\nclass Blush extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  private pencils: PenStyle[];\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      Pencil: 'Pencil',\r\n    };\r\n    this.pencils = ['Pencil', 'Eraser'];\r\n  }\r\n\r\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const style: PenStyle = e.target.value as PenStyle;\r\n    this.setState({ Pencil: style });\r\n    this.context.awPaint.changeMode(style);\r\n  }\r\n\r\n  render() {\r\n    const buttons = this.pencils.map((e) => (\r\n      <Grid key={e}>\r\n        <FormControlLabel\r\n          value={e}\r\n          control={<Radio />}\r\n          label={e}\r\n          checked={e === this.state.Pencil}\r\n          key={e}\r\n          labelPlacement=\"bottom\"\r\n        />\r\n      </Grid>\r\n    ));\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        xs={this.props.ratio}\r\n        className={this.props.classes.container}\r\n        alignItems=\"center\"\r\n        justify=\"space-around\"\r\n      >\r\n        <RadioGroup\r\n          row\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            this.handleChange(e)\r\n          }\r\n        >\r\n          {buttons}\r\n        </RadioGroup>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Blush);\r\n","import React from 'react';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport {\r\n  Grid,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  GridList,\r\n  GridListTile,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      background: 'white',\r\n      borderRadius: '10px',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  size: number;\r\n}\r\n\r\nclass BlushSize extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  private sizes: number[] = [1, 2, 3, 4, 5, 7, 9, 11, 13, 15, 17, 20];\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      size: 1,\r\n    };\r\n  }\r\n\r\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const val = parseInt(e.target.value as string, 10);\r\n    this.setState({ size: val });\r\n    this.context.awPaint.setLineWidth(val);\r\n  }\r\n\r\n  render() {\r\n    const blushSize = this.sizes.map((e) => (\r\n      <GridListTile key={e}>\r\n        <FormControlLabel\r\n          value={e}\r\n          label={`${e}px`}\r\n          labelPlacement=\"bottom\"\r\n          control={<Radio color=\"primary\" />}\r\n          key={e}\r\n        />\r\n      </GridListTile>\r\n    ));\r\n    return (\r\n      <Grid item xs={this.props.ratio}>\r\n        <GridList\r\n          style={{ height: '80%' }}\r\n          className={this.props.classes.container}\r\n        >\r\n          <RadioGroup\r\n            row\r\n            style={{ width: '100%' }}\r\n            value={this.state.size}\r\n            onChange={(e) => this.handleChange(e)}\r\n          >\r\n            {blushSize}\r\n          </RadioGroup>\r\n        </GridList>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(BlushSize);\r\n","import React from 'react';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    media: {\r\n      width: '75%',\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  image: string;\r\n  name: string;\r\n  layerNum: number;\r\n  isSelected: boolean;\r\n  onClick: () => void;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nclass EachLayer extends React.Component<Props> {\r\n  private handleChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\r\n    const value: string = e.target.value;\r\n    this.props.onChange(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        onClick={() => this.props.onClick()}\r\n        className={this.props.classes.root}\r\n        style={{\r\n          border: `solid 1px ${this.props.isSelected ? 'red' : 'black'}`,\r\n        }}\r\n      >\r\n        <CardMedia\r\n          className={this.props.classes.media}\r\n          image={this.props.image}\r\n        />\r\n        <div className={this.props.classes.name}>\r\n          <CardContent className={this.props.classes.content}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              value={this.props.name}\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n                this.handleChange(e)\r\n              }\r\n            />\r\n          </CardContent>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(EachLayer);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  Button,\r\n  GridList,\r\n  GridListTile,\r\n} from '@material-ui/core';\r\nimport EachLayer from './EachLayer';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    buttons: {\r\n      height: '10vh',\r\n    },\r\n    layers: {\r\n      height: '80vh',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n  isInitialized: boolean;\r\n}\r\n\r\ninterface State {\r\n  images: Map<number, string> | null;\r\n  names: Map<number, string> | null;\r\n  order: number[];\r\n  current: number;\r\n}\r\n\r\nclass Layer extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  private id: number = -1;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      images: null,\r\n      names: null,\r\n      current: 0,\r\n      order: [],\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.isInitialized && this.id === -1) {\r\n      this.id = window.setInterval(() => {\r\n        this.getNewData();\r\n      }, 1000);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private getNewData() {\r\n    const images = this.context.awPaint.getLayerImages();\r\n    const names = this.context.awPaint.getLayerNames();\r\n    const order = this.context.awPaint.getSortOrder();\r\n    this.setState({\r\n      images: images,\r\n      names: names,\r\n      order: order,\r\n      current: this.context.awPaint.selectingLayer,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const eachLayer: JSX.Element[] = [];\r\n    if (this.state.order) {\r\n      for (const key of this.state.order) {\r\n        const image = this.state.images?.get(key);\r\n        const name = this.state.names?.get(key);\r\n        if (image && name)\r\n          eachLayer.push(\r\n            <GridListTile key={key}>\r\n              <EachLayer\r\n                layerNum={key}\r\n                name={name}\r\n                image={image}\r\n                onClick={() => {\r\n                  this.context.awPaint.selectLayer(key);\r\n                  this.getNewData();\r\n                }}\r\n                onChange={(value: string) => {\r\n                  this.context.awPaint.renameLayer(key, value);\r\n                  this.getNewData();\r\n                }}\r\n                isSelected={key === this.context.awPaint.selectingLayer}\r\n                key={key}\r\n              ></EachLayer>\r\n            </GridListTile>\r\n          );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Grid container item xs={this.props.ratio}>\r\n        <Grid container item>\r\n          <Grid\r\n            container\r\n            item\r\n            justify=\"space-around\"\r\n            xs={12}\r\n            className={this.props.classes.buttons}\r\n          >\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  const layerNum: number = this.context.awPaint.addLayer();\r\n                  this.context.awPaint.selectLayer(layerNum);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                +\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  this.context.awPaint.removeLayer(\r\n                    this.context.awPaint.selectingLayer\r\n                  );\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                -\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  if (this.state.order[0] === this.state.current) return;\r\n                  const newOrder = [...this.state.order];\r\n                  const index = newOrder.indexOf(this.state.current);\r\n                  [newOrder[index - 1], newOrder[index]] = [\r\n                    newOrder[index],\r\n                    newOrder[index - 1],\r\n                  ];\r\n                  this.context.awPaint.setSortOrder(newOrder);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                ↑\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  if (\r\n                    this.state.order[this.state.order.length - 1] ===\r\n                    this.state.current\r\n                  )\r\n                    return;\r\n                  const newOrder = [...this.state.order];\r\n                  const index = newOrder.indexOf(this.state.current);\r\n                  [newOrder[index + 1], newOrder[index]] = [\r\n                    newOrder[index],\r\n                    newOrder[index + 1],\r\n                  ];\r\n                  this.context.awPaint.setSortOrder(newOrder);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                ↓\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <GridList cols={1} className={this.props.classes.layers}>\r\n              {eachLayer}\r\n            </GridList>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Layer);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& button': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\nclass Undo extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n\r\n  private handleClick(isUndo: boolean): void {\r\n    if (isUndo) {\r\n      this.context.awPaint.undo();\r\n    } else {\r\n      this.context.awPaint.redo();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        alignItems=\"center\"\r\n        justify=\"space-around\"\r\n      >\r\n        <Grid>\r\n          <Button onClick={() => this.handleClick(true)}>Undo</Button>\r\n        </Grid>\r\n        <Grid>\r\n          <Button onClick={() => this.handleClick(false)}>Redo</Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Undo);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\nimport AnywherePaint from 'anywhere-paint';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    canvasContainer: {\r\n      '& div': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  width: number;\r\n  height: number;\r\n  intialize: (awPaint: AnywherePaint) => void;\r\n}\r\n\r\nclass Canvas extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.intialize(\r\n      new AnywherePaint(\r\n        this.container.current as HTMLDivElement,\r\n        this.props.width,\r\n        this.props.height\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        className={this.props.classes.canvasContainer}\r\n      >\r\n        <Grid\r\n          item\r\n          style={{\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            border: 'solid 1px black',\r\n          }}\r\n          ref={this.container}\r\n        ></Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Canvas);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& button': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  downloadName: string;\r\n}\r\n\r\nclass UtilButtons extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      downloadName: '',\r\n    };\r\n  }\r\n\r\n  private download(): void {\r\n    const a = document.createElement('a');\r\n    a.download = this.state.downloadName;\r\n    a.href = this.context.awPaint.getIntegratedImage();\r\n    a.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        alignItems=\"center\"\r\n        justify=\"space-evenly\"\r\n      >\r\n        <Grid>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            value={this.state.downloadName}\r\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n              this.setState({ downloadName: e.target.value })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid>\r\n          <Button onClick={() => this.download()}>Download</Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(UtilButtons);\r\n","import React from 'react';\r\nimport AnywherePaint from 'anywhere-paint';\r\nimport ColorCircle from './Components/ColorCircle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from './Contexts/AnywherePaintContext';\r\nimport Blush from './Components/Blush';\r\nimport BlushSize from './Components/BlushSize';\r\nimport Layer from './Components/Layer';\r\nimport Undo from './Components/Undo';\r\nimport Canvas from './Components/Canvas';\r\n\r\nimport {\r\n  withStyles,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n} from '@material-ui/core';\r\nimport UtilButtons from './Components/UtilButtons';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    root: {\r\n      width: '100vw',\r\n      height: '100vh',\r\n      background: '#818ea3',\r\n      margin: 0,\r\n    },\r\n    container: {\r\n      width: '100vw',\r\n      height: '100vh',\r\n      padding: '2.5vh 2.5vw 2.5vh 2.5vw',\r\n    },\r\n  });\r\n\r\ninterface State {\r\n  awPaint: AnywherePaint | null;\r\n  width: number;\r\n  height: number;\r\n  isInitialized: boolean;\r\n}\r\n\r\nclass App extends React.Component<WithStyles<typeof styles>, State> {\r\n  constructor(props: WithStyles<typeof styles>) {\r\n    super(props);\r\n    this.state = {\r\n      awPaint: null,\r\n      width: 1200,\r\n      height: 800,\r\n      isInitialized: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.props.classes.root}>\r\n        <AnywherePaintContext.Provider value={{ awPaint: this.state.awPaint }}>\r\n          <Grid container className={this.props.classes.container}>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={2}\r\n              alignItems=\"stretch\"\r\n              justify=\"space-around\"\r\n            >\r\n              <ColorCircle\r\n                ratio={12}\r\n                isInitialized={this.state.isInitialized}\r\n              ></ColorCircle>\r\n              <BlushSize ratio={12}></BlushSize>\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={8}\r\n              direction=\"column\"\r\n              alignItems=\"stretch\"\r\n              justify=\"space-around\"\r\n            >\r\n              <Grid container item justify=\"center\">\r\n                <Undo ratio={4}></Undo>\r\n                <UtilButtons ratio={4}></UtilButtons>\r\n                <Blush ratio={4}></Blush>\r\n              </Grid>\r\n              <Canvas\r\n                width={this.state.width}\r\n                height={this.state.height}\r\n                intialize={(awPaint: AnywherePaint) => {\r\n                  this.setState({\r\n                    awPaint: awPaint,\r\n                    isInitialized: true,\r\n                  });\r\n                }}\r\n              ></Canvas>\r\n              <Grid item></Grid>\r\n            </Grid>\r\n            <Layer ratio={2} isInitialized={this.state.isInitialized}></Layer>\r\n          </Grid>\r\n        </AnywherePaintContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}