{"version":3,"sources":["Contexts/AnywherePaintContext.ts","Components/ColorCircle.tsx","Components/Blush.tsx","Components/BlushSize.tsx","Components/EachLayer.tsx","Components/Layer.tsx","Components/Undo.tsx","Components/Canvas.tsx","Components/UtilButtons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AnywherePaintContext","createContext","awPaint","container","ColorCircle","props","div","React","createRef","prevProps","isInitialized","this","context","createColorCircle","current","Grid","item","className","classes","xs","ratio","ref","Component","contextType","withStyles","theme","createStyles","background","borderRadius","Blush","pencils","state","Pencil","e","style","target","value","setState","changeMode","buttons","map","key","FormControlLabel","control","Radio","label","checked","labelPlacement","alignItems","justify","RadioGroup","row","onChange","handleChange","BlushSize","sizes","size","val","parseInt","setLineWidth","blushSize","GridListTile","color","GridList","height","width","EachLayer","Card","onClick","root","border","isSelected","CardMedia","media","image","name","CardContent","content","TextField","variant","display","Layer","images","names","order","addEventListener","getNewData","isUpdated","getLayerImages","getLayerNames","getSortOrder","selectingLayer","eachLayer","get","push","layerNum","selectLayer","renameLayer","Button","addLayer","removeLayer","newOrder","index","indexOf","setSortOrder","length","cols","layers","Undo","isUndo","undo","redo","onUpdate","handleClick","clearLayer","Canvas","intialize","AnywherePaint","canvasContainer","UtilButtons","downloadName","a","document","createElement","download","href","getIntegratedImage","click","App","prevState","Provider","direction","margin","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32a90d20.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nimport AnywherePaint from 'anywhere-paint';\r\n\r\ninterface ContextInterface {\r\n  awPaint: AnywherePaint | null;\r\n  container: React.RefObject<HTMLDivElement> | null;\r\n}\r\n\r\nconst AnywherePaintContext = createContext<ContextInterface>({\r\n  awPaint: null,\r\n  container: null,\r\n});\r\nexport default AnywherePaintContext;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& div': {\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n  isInitialized: boolean;\r\n}\r\n\r\nclass ColorCircle extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n  private div: React.RefObject<HTMLDivElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.div = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (!prevProps.isInitialized && this.props.isInitialized)\r\n      this.context.awPaint.createColorCircle(\r\n        this.div.current as HTMLDivElement\r\n      );\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        ref={this.div}\r\n      ></Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ColorCircle);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { Radio, Grid, RadioGroup, FormControlLabel } from '@material-ui/core';\r\nimport { PenStyle } from '../../node_modules/anywhere-paint/lib/penInterface.d';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& div': {\r\n        background: 'white',\r\n        borderRadius: '10px',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  Pencil: PenStyle;\r\n}\r\n\r\nclass Blush extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  private pencils: PenStyle[];\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      Pencil: 'Pencil',\r\n    };\r\n    this.pencils = ['Pencil', 'Eraser', 'Fill'];\r\n  }\r\n\r\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const style: PenStyle = e.target.value as PenStyle;\r\n    this.setState({ Pencil: style });\r\n    this.context.awPaint.changeMode(style);\r\n  }\r\n\r\n  render() {\r\n    const buttons = this.pencils.map((e) => (\r\n      <Grid key={e}>\r\n        <FormControlLabel\r\n          value={e}\r\n          control={<Radio />}\r\n          label={e}\r\n          checked={e === this.state.Pencil}\r\n          key={e}\r\n          labelPlacement=\"bottom\"\r\n        />\r\n      </Grid>\r\n    ));\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        xs={this.props.ratio}\r\n        className={this.props.classes.container}\r\n        alignItems=\"center\"\r\n        justify=\"space-around\"\r\n      >\r\n        <RadioGroup\r\n          row\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            this.handleChange(e)\r\n          }\r\n        >\r\n          {buttons}\r\n        </RadioGroup>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Blush);\r\n","import React from 'react';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport {\r\n  Grid,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  GridList,\r\n  GridListTile,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      background: 'white',\r\n      borderRadius: '10px',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  size: number;\r\n}\r\n\r\nclass BlushSize extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  private sizes: number[] = [1, 2, 3, 4, 5, 7, 9, 11, 13, 15, 17, 20];\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      size: 1,\r\n    };\r\n  }\r\n\r\n  private handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const val = parseInt(e.target.value as string, 10);\r\n    this.setState({ size: val });\r\n    this.context.awPaint.setLineWidth(val);\r\n  }\r\n\r\n  render() {\r\n    const blushSize = this.sizes.map((e) => (\r\n      <GridListTile key={e}>\r\n        <FormControlLabel\r\n          value={e}\r\n          label={`${e}px`}\r\n          labelPlacement=\"bottom\"\r\n          control={<Radio color=\"primary\" />}\r\n          key={e}\r\n        />\r\n      </GridListTile>\r\n    ));\r\n    return (\r\n      <Grid item xs={this.props.ratio}>\r\n        <GridList\r\n          style={{ height: '80%' }}\r\n          className={this.props.classes.container}\r\n        >\r\n          <RadioGroup\r\n            row\r\n            style={{ width: '100%' }}\r\n            value={this.state.size}\r\n            onChange={(e) => this.handleChange(e)}\r\n          >\r\n            {blushSize}\r\n          </RadioGroup>\r\n        </GridList>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(BlushSize);\r\n","import React from 'react';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    media: {\r\n      width: '75%',\r\n    },\r\n    content: {\r\n      display: 'flex',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  image: string;\r\n  name: string;\r\n  layerNum: number;\r\n  isSelected: boolean;\r\n  onClick: () => void;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nclass EachLayer extends React.Component<Props> {\r\n  private handleChange(e: React.ChangeEvent<HTMLTextAreaElement>): void {\r\n    const value: string = e.target.value;\r\n    this.props.onChange(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card\r\n        onClick={() => this.props.onClick()}\r\n        className={this.props.classes.root}\r\n        style={{\r\n          border: `solid 1px ${this.props.isSelected ? 'red' : 'black'}`,\r\n        }}\r\n      >\r\n        <CardMedia\r\n          className={this.props.classes.media}\r\n          image={this.props.image}\r\n        />\r\n        <div className={this.props.classes.name}>\r\n          <CardContent className={this.props.classes.content}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              value={this.props.name}\r\n              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n                this.handleChange(e)\r\n              }\r\n            />\r\n          </CardContent>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(EachLayer);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  Button,\r\n  GridList,\r\n  GridListTile,\r\n} from '@material-ui/core';\r\nimport EachLayer from './EachLayer';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    buttons: {\r\n      height: '10vh',\r\n    },\r\n    layers: {\r\n      height: '80vh',\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n  isInitialized: boolean;\r\n  isUpdated: boolean;\r\n}\r\n\r\ninterface State {\r\n  images: Map<number, string> | null;\r\n  names: Map<number, string> | null;\r\n  order: number[];\r\n  current: number;\r\n}\r\n\r\nclass Layer extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      images: null,\r\n      names: null,\r\n      current: 0,\r\n      order: [],\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    if (this.props.isInitialized && !prevProps.isInitialized) {\r\n      this.context.container.current.addEventListener('pointerup', () =>\r\n        this.getNewData()\r\n      );\r\n      this.getNewData();\r\n    }\r\n    if (this.props.isUpdated) {\r\n      this.getNewData();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private getNewData() {\r\n    const images = this.context.awPaint.getLayerImages();\r\n    const names = this.context.awPaint.getLayerNames();\r\n    const order = this.context.awPaint.getSortOrder();\r\n    this.setState({\r\n      images: images,\r\n      names: names,\r\n      order: order,\r\n      current: this.context.awPaint.selectingLayer,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const eachLayer: JSX.Element[] = [];\r\n    if (this.state.order) {\r\n      for (const key of this.state.order) {\r\n        const image = this.state.images?.get(key);\r\n        const name = this.state.names?.get(key);\r\n        if (image && name)\r\n          eachLayer.push(\r\n            <GridListTile key={key}>\r\n              <EachLayer\r\n                layerNum={key}\r\n                name={name}\r\n                image={image}\r\n                onClick={() => {\r\n                  this.context.awPaint.selectLayer(key);\r\n                  this.getNewData();\r\n                }}\r\n                onChange={(value: string) => {\r\n                  this.context.awPaint.renameLayer(key, value);\r\n                  this.getNewData();\r\n                }}\r\n                isSelected={key === this.context.awPaint.selectingLayer}\r\n                key={key}\r\n              ></EachLayer>\r\n            </GridListTile>\r\n          );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Grid container item xs={this.props.ratio}>\r\n        <Grid container item>\r\n          <Grid\r\n            container\r\n            item\r\n            justify=\"space-around\"\r\n            xs={12}\r\n            className={this.props.classes.buttons}\r\n          >\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  const layerNum: number = this.context.awPaint.addLayer();\r\n                  this.context.awPaint.selectLayer(layerNum);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                +\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  this.context.awPaint.removeLayer(\r\n                    this.context.awPaint.selectingLayer\r\n                  );\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                -\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  if (this.state.order[0] === this.state.current) return;\r\n                  const newOrder = [...this.state.order];\r\n                  const index = newOrder.indexOf(this.state.current);\r\n                  [newOrder[index - 1], newOrder[index]] = [\r\n                    newOrder[index],\r\n                    newOrder[index - 1],\r\n                  ];\r\n                  this.context.awPaint.setSortOrder(newOrder);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                ↑\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => {\r\n                  if (\r\n                    this.state.order[this.state.order.length - 1] ===\r\n                    this.state.current\r\n                  )\r\n                    return;\r\n                  const newOrder = [...this.state.order];\r\n                  const index = newOrder.indexOf(this.state.current);\r\n                  [newOrder[index + 1], newOrder[index]] = [\r\n                    newOrder[index],\r\n                    newOrder[index + 1],\r\n                  ];\r\n                  this.context.awPaint.setSortOrder(newOrder);\r\n                  this.getNewData();\r\n                }}\r\n              >\r\n                ↓\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <GridList cols={1} className={this.props.classes.layers}>\r\n              {eachLayer}\r\n            </GridList>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Layer);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& button': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n  onUpdate: () => void;\r\n}\r\n\r\nclass Undo extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n\r\n  private handleClick(isUndo: boolean): void {\r\n    if (isUndo) {\r\n      this.context.awPaint.undo();\r\n    } else {\r\n      this.context.awPaint.redo();\r\n    }\r\n    this.props.onUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        alignItems=\"center\"\r\n        justify=\"space-around\"\r\n      >\r\n        <Grid>\r\n          <Button onClick={() => this.handleClick(true)}>Undo</Button>\r\n        </Grid>\r\n        <Grid>\r\n          <Button onClick={() => this.handleClick(false)}>Redo</Button>\r\n        </Grid>\r\n        <Grid>\r\n          <Button\r\n            onClick={() => {\r\n              this.context.awPaint.clearLayer(\r\n                this.context.awPaint.selectingLayer\r\n              );\r\n              this.props.onUpdate();\r\n            }}\r\n          >\r\n            Clear\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Undo);\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport {\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n} from '@material-ui/core';\r\nimport AnywherePaint from 'anywhere-paint';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    canvasContainer: {\r\n      '& div': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  width: number;\r\n  height: number;\r\n  intialize: (\r\n    awPaint: AnywherePaint,\r\n    container: React.RefObject<HTMLDivElement>\r\n  ) => void;\r\n}\r\n\r\nclass Canvas extends React.Component<Props> {\r\n  static contextType = AnywherePaintContext;\r\n  private container: React.RefObject<HTMLDivElement>;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.intialize(\r\n      new AnywherePaint(\r\n        this.container.current as HTMLDivElement,\r\n        this.props.width,\r\n        this.props.height\r\n      ),\r\n      this.container\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        className={this.props.classes.canvasContainer}\r\n      >\r\n        <Grid\r\n          item\r\n          style={{\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            border: 'solid 1px black',\r\n          }}\r\n          ref={this.container}\r\n        ></Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Canvas);\r\n","import React from 'react';\r\nimport AnywherePaintContext from '../Contexts/AnywherePaintContext';\r\nimport { flexSize } from '../typings/MaterialUI';\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Theme,\r\n  StyleRules,\r\n  createStyles,\r\n  WithStyles,\r\n  withStyles,\r\n  TextField,\r\n} from '@material-ui/core';\r\n\r\nconst styles = (theme: Theme): StyleRules =>\r\n  createStyles({\r\n    container: {\r\n      '& button': {\r\n        background: 'white',\r\n      },\r\n    },\r\n  });\r\n\r\ninterface Props extends WithStyles<typeof styles> {\r\n  ratio: flexSize;\r\n}\r\n\r\ninterface State {\r\n  downloadName: string;\r\n}\r\n\r\nclass UtilButtons extends React.Component<Props, State> {\r\n  static contextType = AnywherePaintContext;\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      downloadName: '',\r\n    };\r\n  }\r\n\r\n  private download(): void {\r\n    const a = document.createElement('a');\r\n    a.download = this.state.downloadName;\r\n    a.href = this.context.awPaint.getIntegratedImage();\r\n    a.click();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        container\r\n        item\r\n        className={this.props.classes.container}\r\n        xs={this.props.ratio}\r\n        alignItems=\"center\"\r\n        justify=\"space-evenly\"\r\n      >\r\n        <Grid>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            value={this.state.downloadName}\r\n            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>\r\n              this.setState({ downloadName: e.target.value })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid>\r\n          <Button onClick={() => this.download()}>Download</Button>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(UtilButtons);\r\n","import React from 'react';\nimport AnywherePaint from 'anywhere-paint';\nimport ColorCircle from './Components/ColorCircle';\nimport Grid from '@material-ui/core/Grid';\nimport AnywherePaintContext from './Contexts/AnywherePaintContext';\nimport Blush from './Components/Blush';\nimport BlushSize from './Components/BlushSize';\nimport Layer from './Components/Layer';\nimport Undo from './Components/Undo';\nimport Canvas from './Components/Canvas';\n\nimport {\n  withStyles,\n  Theme,\n  StyleRules,\n  createStyles,\n  WithStyles,\n} from '@material-ui/core';\nimport UtilButtons from './Components/UtilButtons';\n\nconst styles = (theme: Theme): StyleRules =>\n  createStyles({\n    root: {\n      width: '100vw',\n      height: '100vh',\n      background: '#818ea3',\n      margin: 0,\n    },\n    container: {\n      width: '100vw',\n      height: '100vh',\n      padding: '2.5vh 2.5vw 2.5vh 2.5vw',\n    },\n  });\n\ninterface State {\n  awPaint: AnywherePaint | null;\n  container: React.RefObject<HTMLDivElement> | null;\n  width: number;\n  height: number;\n  isInitialized: boolean;\n  isUpdated: boolean;\n}\n\nclass App extends React.Component<WithStyles<typeof styles>, State> {\n  constructor(props: WithStyles<typeof styles>) {\n    super(props);\n    this.state = {\n      awPaint: null,\n      container: null,\n      width: 1200,\n      height: 800,\n      isInitialized: false,\n      isUpdated: false,\n    };\n  }\n\n  componentDidUpdate(prevProps: {}, prevState: State) {\n    if (!prevState.isUpdated && this.state.isUpdated) {\n      this.setState({ isUpdated: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <AnywherePaintContext.Provider\n          value={{\n            awPaint: this.state.awPaint,\n            container: this.state.container,\n          }}\n        >\n          <Grid container className={this.props.classes.container}>\n            <Grid\n              container\n              item\n              xs={2}\n              alignItems=\"stretch\"\n              justify=\"space-around\"\n            >\n              <ColorCircle\n                ratio={12}\n                isInitialized={this.state.isInitialized}\n              ></ColorCircle>\n              <BlushSize ratio={12}></BlushSize>\n            </Grid>\n            <Grid\n              container\n              item\n              xs={8}\n              direction=\"column\"\n              alignItems=\"stretch\"\n              justify=\"space-around\"\n            >\n              <Grid container item justify=\"center\">\n                <Undo\n                  ratio={4}\n                  onUpdate={() => this.setState({ isUpdated: true })}\n                ></Undo>\n\n                <UtilButtons ratio={4}></UtilButtons>\n                <Blush ratio={4}></Blush>\n              </Grid>\n              <Canvas\n                width={this.state.width}\n                height={this.state.height}\n                intialize={(\n                  awPaint: AnywherePaint,\n                  container: React.RefObject<HTMLDivElement>\n                ) => {\n                  this.setState({\n                    awPaint: awPaint,\n                    isInitialized: true,\n                    container: container,\n                  });\n                }}\n              ></Canvas>\n              <Grid item></Grid>\n            </Grid>\n            <Layer\n              ratio={2}\n              isInitialized={this.state.isInitialized}\n              isUpdated={this.state.isUpdated}\n            ></Layer>\n          </Grid>\n        </AnywherePaintContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}